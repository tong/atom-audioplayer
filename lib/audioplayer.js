// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var AudioPlayerView = $hx_exports["AudioPlayerView"] = function(player) {
	var _gthis = this;
	this.player = player;
	this.wheelSpeed = 1;
	var workspaceStyle = window.getComputedStyle(atom.views.getView(atom.workspace));
	this.element = window.document.createElement("div");
	this.element.classList.add("audioplayer");
	this.element.setAttribute("tabindex","-1");
	this.waveform = new Waveform(workspaceStyle.color,workspaceStyle.backgroundColor);
	this.element.appendChild(this.waveform.canvas);
	this.marker = window.document.createElement("div");
	this.marker.classList.add("marker");
	this.element.appendChild(this.marker);
	this.element.appendChild(player.audio);
	this.element.addEventListener("DOMNodeInserted",function() {
		player.audio.addEventListener("playing",$bind(_gthis,_gthis.handleAudioPlaying),false);
		player.audio.addEventListener("ended",$bind(_gthis,_gthis.handleAudioEnded),false);
		player.audio.addEventListener("error",$bind(_gthis,_gthis.handleAudioError),false);
		player.audio.addEventListener("canplaythrough",function(e) {
			_gthis.waveform.color = workspaceStyle.color;
			_gthis.waveform.canvas.style.backgroundColor = workspaceStyle.backgroundColor;
			_gthis.waveform.generate(player.getPath(),null,function() {
				_gthis.updateMarker();
			});
			_gthis.element.addEventListener("click",$bind(_gthis,_gthis.handleMouseDown),false);
			_gthis.element.addEventListener("mousewheel",$bind(_gthis,_gthis.handleMouseWheel),false);
		},false);
	},false);
	window.addEventListener("resize",$bind(this,this.handleResize),false);
};
AudioPlayerView.__name__ = ["AudioPlayerView"];
AudioPlayerView.prototype = {
	update: function(time) {
		this.animationFrameId = window.requestAnimationFrame($bind(this,this.update));
		this.updateMarker();
	}
	,seek: function(time) {
		if(this.player.audio.currentTime != null) {
			this.player.audio.currentTime += time;
		}
		return this.player.audio.currentTime;
	}
	,setAudioPositionFromPanePosition: function(x) {
		this.player.audio.currentTime = this.player.audio.duration * (x / this.element.offsetWidth);
	}
	,updateMarker: function() {
		this.marker.style.left = this.player.audio.currentTime / this.player.audio.duration * this.element.offsetWidth + "px";
	}
	,handleAudioPlaying: function(e) {
		this.animationFrameId = window.requestAnimationFrame($bind(this,this.update));
	}
	,handleAudioEnded: function(e) {
	}
	,handleAudioError: function(e) {
	}
	,handleMouseDown: function(e) {
		this.setAudioPositionFromPanePosition(e.layerX);
	}
	,handleMouseUp: function(e) {
	}
	,handleMouseOut: function(e) {
	}
	,handleMouseWheel: function(e) {
		var v = e.wheelDelta / 100 * this.wheelSpeed;
		if(e.ctrlKey) {
			v *= 10;
			if(e.shiftKey) {
				v *= 10;
			}
		}
		this.seek(v);
	}
	,handleResize: function(e) {
		this.waveform.resize();
	}
	,__class__: AudioPlayerView
};
var Waveform = function(color,backgroundColor) {
	this.canvas = window.document.createElement("canvas");
	this.canvas.classList.add("waveform");
	this.canvas.width = window.innerWidth;
	this.canvas.height = window.innerHeight;
	this.color = color;
	this.canvas.style.backgroundColor = backgroundColor;
	this.context = this.canvas.getContext("2d",null);
	this.context.fillStyle = color;
};
Waveform.__name__ = ["Waveform"];
Waveform.prototype = {
	get_backgroundColor: function() {
		return this.canvas.style.backgroundColor;
	}
	,set_backgroundColor: function(v) {
		return this.canvas.style.backgroundColor = v;
	}
	,generate: function(path,subRanges,onComplete) {
		var _gthis = this;
		if(subRanges == null) {
			subRanges = window.innerWidth;
		}
		om_audio_AudioBufferLoader.load(AudioPlayer.context,path,function(e,buf) {
			if(e != null) {
				atom.notifications.addError("Failed to analyze sound data");
				return;
			}
			_gthis.peaks = om_audio_PeakMeter.getMergedPeaks(buf,subRanges);
			_gthis.drawChannel(_gthis.peaks);
			if(onComplete != null) {
				onComplete();
			}
		});
	}
	,resize: function() {
		this.canvas.width = window.innerWidth;
		this.canvas.height = window.innerHeight;
		this.drawChannel(this.peaks);
	}
	,drawChannel: function(peaks) {
		this.context.clearRect(0,0,this.canvas.width,this.canvas.height);
		this.context.fillStyle = this.color;
		var stepSizeX = this.canvas.width / peaks.length;
		var i = 0;
		var halfHeight = this.canvas.height / 2;
		var _g = 0;
		while(_g < peaks.length) {
			var peak = peaks[_g];
			++_g;
			this.context.fillRect(i * stepSizeX,halfHeight,stepSizeX,peak * halfHeight / 2);
			++i;
		}
	}
	,__class__: Waveform
};
var AudioPlayer = $hx_exports["AudioPlayer"] = function(path,play,time) {
	if(time == null) {
		time = 0.0;
	}
	this.file = new atom_File(path);
	this.audio = window.document.createElement("audio");
	this.audio.autoplay = play;
	this.audio.controls = true;
	this.audio.src = this.file.getPath();
	this.audio.currentTime = time;
};
AudioPlayer.__name__ = ["AudioPlayer"];
AudioPlayer.activate = function(state) {
	console.log("Atom-audioplayer ");
	AudioPlayer.context = new AudioContext();
	AudioPlayer.disposables.add(atom.workspace.addOpener(AudioPlayer.openURI));
};
AudioPlayer.deactivate = function() {
	AudioPlayer.disposables.dispose();
};
AudioPlayer.openURI = function(uri) {
	if(Lambda.has(AudioPlayer.allowedFileTypes,haxe_io_Path.extension(uri).toLowerCase())) {
		return new AudioPlayer(uri,atom.config.get("audioplayer.autoplay"));
	}
	return null;
};
AudioPlayer.consumeStatusBar = function(pane) {
};
AudioPlayer.deserialize = function(state) {
	console.log(state);
	return new AudioPlayer(state.path,state.play,state.time);
};
AudioPlayer.prototype = {
	serialize: function() {
		return { deserializer : "AudioPlayer", path : this.file.getPath(), play : !this.audio.paused, time : this.audio.currentTime};
	}
	,dispose: function() {
		this.audio.pause();
		this.audio.remove();
		this.audio = null;
	}
	,getPath: function() {
		return this.file.getPath();
	}
	,getTitle: function() {
		return this.file.getBaseName();
	}
	,getURI: function() {
		var s = this.file.getPath();
		return "file://" + encodeURIComponent(s);
	}
	,isEqual: function(other) {
		if(!js_Boot.__instanceof(other,AudioPlayer)) {
			return false;
		}
		return this.getURI() == (js_Boot.__cast(other , AudioPlayer)).getURI();
	}
	,__class__: AudioPlayer
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(tmp.next() == elt) {
		return true;
	}
	return false;
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var atom_Disposable = function() { };
atom_Disposable.__name__ = ["atom","Disposable"];
atom_Disposable.prototype = {
	__class__: atom_Disposable
};
var atom_File = require("atom").File;
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var om_Error = function(message,pos) {
	Error.call(this,message);
	this.message = message;
	this.pos = pos;
	var clName = Type.getClassName(js_Boot.getClass(this));
	if(clName.indexOf(".") != -1) {
		clName = clName.split(".").pop();
	}
	this.name = clName;
};
om_Error.__name__ = ["om","Error"];
om_Error.__super__ = Error;
om_Error.prototype = $extend(Error.prototype,{
	get_fileName: function() {
		return this.pos.fileName;
	}
	,get_lineNumber: function() {
		return this.pos.lineNumber;
	}
	,get_methodName: function() {
		return this.pos.methodName;
	}
	,toString: function() {
		var items = haxe_CallStack.exceptionStack();
		if(items.length == 0) {
			items = haxe_CallStack.callStack();
		}
		return this.pos.fileName + ":" + this.pos.lineNumber + " : " + this.message + haxe_CallStack.toString(items);
	}
	,getSourcePosition: function() {
		return this.pos.fileName + ":" + this.pos.lineNumber;
	}
	,getCallStack: function() {
		return haxe_CallStack.callStack();
	}
	,callStack: function() {
		return haxe_CallStack.toString(haxe_CallStack.callStack());
	}
	,getExceptionStack: function() {
		return haxe_CallStack.exceptionStack();
	}
	,exceptionStack: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,__class__: om_Error
});
var om_audio_AudioBufferLoader = function() { };
om_audio_AudioBufferLoader.__name__ = ["om","audio","AudioBufferLoader"];
om_audio_AudioBufferLoader.load = function(context,url,callback) {
	om_audio_AudioBufferLoader.loadArrayBuffer(context,url,function(e,data) {
		if(e != null) {
			callback(e,null);
		} else {
			context.decodeAudioData(data,function(buf) {
				callback(null,buf);
			});
		}
	});
};
om_audio_AudioBufferLoader.loadArrayBuffer = function(context,url,callback) {
	var errorReported = false;
	var xhr = new XMLHttpRequest();
	xhr.open("GET",url,true);
	xhr.responseType = "arraybuffer";
	xhr.onreadystatechange = function(e) {
		if(xhr.status != 200 && !errorReported) {
			errorReported = true;
			callback(new om_error_FileNotFound(url,{ fileName : "AudioBufferLoader.hx", lineNumber : 37, className : "om.audio.AudioBufferLoader", methodName : "loadArrayBuffer"}),null);
			return;
		}
	};
	xhr.onload = function(e1) {
		callback(null,xhr.response);
	};
	xhr.send();
};
var om_audio_PeakMeter = function() { };
om_audio_PeakMeter.__name__ = ["om","audio","PeakMeter"];
om_audio_PeakMeter.getPeaks = function(buf,numSubRanges) {
	var sampleSize = buf.length / numSubRanges | 0;
	var sampleStep = ~(~(sampleSize / 10 | 0)) | 0;
	var channels = buf.numberOfChannels;
	var splitPeaks = [];
	var _g1 = 0;
	while(_g1 < channels) {
		var c = _g1++;
		var peaks = splitPeaks[c] = [];
		var chan = buf.getChannelData(c);
		var _g3 = 0;
		while(_g3 < numSubRanges) {
			var i = _g3++;
			var start = ~(~(i * sampleSize | 0)) | 0;
			var end = ~(~(start + sampleSize));
			var min = chan[0];
			var max = chan[0];
			var j = start;
			while(j < end) {
				var value = chan[j];
				if(value > max) {
					max = value;
				}
				if(value < min) {
					min = value;
				}
				j += sampleStep;
			}
			peaks[2 * i] = max;
			peaks[2 * i + 1] = min;
		}
	}
	return splitPeaks;
};
om_audio_PeakMeter.getMergedPeaks = function(buf,length) {
	var sampleSize = buf.length / length | 0;
	console.log(sampleSize);
	var sampleStep = ~(~(sampleSize / 10 | 0)) | 0;
	var channels = buf.numberOfChannels;
	var mergedPeaks = [];
	var _g1 = 0;
	while(_g1 < channels) {
		var c = _g1++;
		var peaks = [];
		var chan = buf.getChannelData(c);
		var _g3 = 0;
		while(_g3 < length) {
			var i = _g3++;
			var start = ~(~(i * sampleSize)) | 0;
			var end = ~(~(start + sampleSize));
			var min = chan[0];
			var max = chan[0];
			var j = start;
			while(j < end) {
				var value = chan[j];
				if(value > max) {
					max = value;
				}
				if(value < min) {
					min = value;
				}
				j += sampleStep;
			}
			peaks[2 * i] = max;
			peaks[2 * i + 1] = min;
			if(c == 0 || max > mergedPeaks[2 * i]) {
				mergedPeaks[2 * i] = max;
			}
			if(c == 0 || min < mergedPeaks[2 * i + 1]) {
				mergedPeaks[2 * i + 1] = min;
			}
		}
	}
	return mergedPeaks;
};
om_audio_PeakMeter.getChannelPeaks = function(data,length) {
	var sampleSize = data.length / length | 0;
	var sampleStep = ~(~(sampleSize / 10 | 0)) | 0;
	var peaks = [];
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var start = ~(~(i * sampleSize | 0)) | 0;
		var end = ~(~(start + sampleSize));
		var min = data[0];
		var max = data[0];
		var j = start;
		while(j < end) {
			var value = data[j];
			if(value > max) {
				max = value;
			}
			if(value < min) {
				min = value;
			}
			j += sampleStep;
		}
		peaks[2 * i] = max;
		peaks[2 * i + 1] = min;
	}
	return peaks;
};
var om_error_NotFound = function(location,pos) {
	om_Error.call(this,"" + location + " not found",pos);
	this.location = location;
};
om_error_NotFound.__name__ = ["om","error","NotFound"];
om_error_NotFound.__super__ = om_Error;
om_error_NotFound.prototype = $extend(om_Error.prototype,{
	__class__: om_error_NotFound
});
var om_error_FileNotFound = function(location,pos) {
	om_error_NotFound.call(this,location,pos);
};
om_error_FileNotFound.__name__ = ["om","error","FileNotFound"];
om_error_FileNotFound.__super__ = om_error_NotFound;
om_error_FileNotFound.prototype = $extend(om_error_NotFound.prototype,{
	__class__: om_error_FileNotFound
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
module.exports = AudioPlayer;
AudioPlayer.disposables = new atom_CompositeDisposable();
AudioPlayer.disposables.add(atom.views.addViewProvider(AudioPlayer,function(player) {
	return new AudioPlayerView(player).element;
}));
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
AudioPlayer.allowedFileTypes = ["aiff","flac","mp3","ogg","wav"];
js_Boot.__toStr = { }.toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=audioplayer.js.map